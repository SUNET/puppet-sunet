#!/bin/bash

REDICT_PORT=6379
FQDN=$(hostname --fqdn)
INFRA_CERT_PATH="/etc/ssl/certs/${FQDN}_infra.crt"
INFRA_KEY_PATH="/etc/ssl/private/${FQDN}_infra.key"
CA_CERT_PATH="/etc/ssl/certs/infra.crt"


# Function to display usage
function usage() {
  echo "Usage: $0 --connect | --ping | --server-info | --client-info | --cluster-nodes | --cluster-info | --list-keys | --stats | --latency"
  exit 1
}

function get_redict_password() {
  # Get the redict password stored in eyaml
  local redict_password=$(eyaml decrypt -f /etc/hiera/data/local.eyaml --pkcs7-private-key=/etc/hiera/eyaml/private_key.pkcs7.pem --pkcs7-public-key=/etc/hiera/eyaml/public_certkey.pkcs7.pem | awk '/^redict_password: /{print $2}')
  echo "$redict_password"
}

function connect() {
  local redict_password=$(get_redict_password)
  redis-cli -a "$redict_password" --no-auth-warning -h $FQDN --tls --cert "$INFRA_CERT_PATH" --key "$INFRA_KEY_PATH" --cacert "$CA_CERT_PATH" -p "$REDICT_PORT"
}

function ping() {
  local redict_password=$(get_redict_password)
  redis-cli -a "$redict_password" --no-auth-warning -h $FQDN --tls --cert "$INFRA_CERT_PATH" --key "$INFRA_KEY_PATH" --cacert "$CA_CERT_PATH" -p "$REDICT_PORT" PING
}

function server_info() {
  local redict_password=$(get_redict_password)
  redis-cli -a "$redict_password" --no-auth-warning -h $FQDN --tls --cert "$INFRA_CERT_PATH" --key "$INFRA_KEY_PATH" --cacert "$CA_CERT_PATH" -p "$REDICT_PORT" INFO SERVER
}

function cluster_nodes() {
  local redict_password=$(get_redict_password)
  redis-cli -a "$redict_password" --no-auth-warning -h $FQDN --tls --cert "$INFRA_CERT_PATH" --key "$INFRA_KEY_PATH" --cacert "$CA_CERT_PATH" -p "$REDICT_PORT" CLUSTER NODES
}

function cluster_info() {
  local redict_password=$(get_redict_password)
  redis-cli -a "$redict_password" --no-auth-warning -h $FQDN --tls --cert "$INFRA_CERT_PATH" --key "$INFRA_KEY_PATH" --cacert "$CA_CERT_PATH" -p "$REDICT_PORT" CLUSTER INFO
}

function list_keys() {
  local redict_password=$(get_redict_password)
  redis-cli -a "$redict_password" --no-auth-warning -h $FQDN --tls --cert "$INFRA_CERT_PATH" --key "$INFRA_KEY_PATH" --cacert "$CA_CERT_PATH" -p "$REDICT_PORT" SCAN 0
}

function stats() {
  local redict_password=$(get_redict_password)
  redis-cli -a "$redict_password" --no-auth-warning -h $FQDN --tls --cert "$INFRA_CERT_PATH" --key "$INFRA_KEY_PATH" --cacert "$CA_CERT_PATH" -p "$REDICT_PORT" INFO STATS
}

function client_info() {
  local redict_password=$(get_redict_password)
  redis-cli -a "$redict_password" --no-auth-warning -h $FQDN --tls --cert "$INFRA_CERT_PATH" --key "$INFRA_KEY_PATH" --cacert "$CA_CERT_PATH" -p "$REDICT_PORT" INFO CLIENTS
}

function memory_info() {
  local redict_password=$(get_redict_password)
  redis-cli -a "$redict_password" --no-auth-warning -h $FQDN --tls --cert "$INFRA_CERT_PATH" --key "$INFRA_KEY_PATH" --cacert "$CA_CERT_PATH" -p "$REDICT_PORT" INFO MEMORY
}

function latency() {
  local redict_password=$(get_redict_password)
  redis-cli -a "$redict_password" --no-auth-warning -h $FQDN --tls --cert "$INFRA_CERT_PATH" --key "$INFRA_KEY_PATH" --cacert "$CA_CERT_PATH" -p "$REDICT_PORT" LATENCY LATEST
  redis-cli -a "$redict_password" --no-auth-warning -h $FQDN --tls --cert "$INFRA_CERT_PATH" --key "$INFRA_KEY_PATH" --cacert "$CA_CERT_PATH" -p "$REDICT_PORT" LATENCY DOCTOR
}

function _test() {
  local redict_password=$(get_redict_password)
  redis-cli -a "$redict_password" --no-auth-warning -h $FQDN --tls --cert "$INFRA_CERT_PATH" --key "$INFRA_KEY_PATH" --cacert "$CA_CERT_PATH" -p "$REDICT_PORT" INFO MEMORY
}

# Parse the options
OPTIONS=$(getopt -o '' --long connect,ping,server-info,client-info,cluster-nodes,cluster-info,list-keys,stats,memory-info,latency,test -- "$@")
if [ $? -ne 0 ]; then
  usage
fi

# Check if exactly one option was provided
if [ $# -ne 1 ]; then
  usage
fi

# Evaluate the parsed options
eval set -- "$OPTIONS"
while true; do
  case "$1" in
    --connect)
      connect
      shift
      break
      ;;
    --ping)
      ping
      shift
      break
      ;;
    --server-info)
      server_info
      shift
      break
      ;;
    --client-info)
      client_info
      shift
      break
      ;;
    --cluster-nodes)
      cluster_nodes
      shift
      break
      ;;
    --cluster-info)
      cluster_info
      shift
      break
      ;;
    --list-keys)
      list_keys
      shift
      break
      ;;
    --stats)
      stats
      shift
      break
      ;;
    --memory-info)
      memory_info
      shift
      break
      ;;
    --latency)
      latency
      shift
      break
      ;;
    --test)
      _test
      shift
      break
      ;;
    --)
      shift
      break
      ;;
    *)
      usage
      ;;
  esac
done

exit 0
