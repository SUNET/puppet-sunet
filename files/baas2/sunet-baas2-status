#!/usr/bin/env python3
# pylint:disable=invalid-name
# pylint:enable=invalid-name
""" Check dsmc logs and other information and exit non-zero if something bad is detected """

import shlex
import subprocess
import sys
import re
import datetime
import os


def write_schedule_cache(cache_file: str) -> None:
    """request schedule data and write it out to a cache file for future use"""
    cache_file_tmp = f"{cache_file}.tmp"
    proc_args = shlex.split("dsmc query schedule")
    proc = subprocess.run(proc_args, capture_output=True, check=True, encoding="utf-8")

    with open(cache_file_tmp, "w", encoding="utf-8") as fileobj:
        fileobj.write(proc.stdout)

    os.rename(cache_file_tmp, cache_file)


def get_schedule_data() -> str:
    """return schedule data for this node, using a cache most of the time"""
    # To not have to wait for TSM all the time we cache the server response for a while
    cache_dir = "/var/cache/sunet-baas2-status"
    os.makedirs(cache_dir, exist_ok=True)
    cache_file = f"{cache_dir}/dsmc_schedule.cache"

    # Use the cached version if available and not too old, otherwise refresh the file.
    if os.path.isfile(cache_file):
        mtime = os.path.getmtime(cache_file)
        mtime_datetime = datetime.datetime.fromtimestamp(mtime)
        file_age = datetime.datetime.now() - mtime_datetime
        if file_age > datetime.timedelta(hours=10):
            print(f"refreshing schedule cache file {cache_file}")
            write_schedule_cache(cache_file)
        else:
            print(f"using existing schedule cache {cache_file}")
    else:
        print(f"getting initial schedule cache file {cache_file}")
        write_schedule_cache(cache_file)

    with open(cache_file, "r", encoding="utf-8") as fileobj:
        schedule_data = fileobj.read()

    return schedule_data


def have_schedule() -> bool:
    """returns true if the node has at least one schedule assigned to it"""
    schedule_data = get_schedule_data()

    for line in schedule_data.splitlines():
        # We are looking for lines like "Schedule Name: FILE_1600"
        if " Schedule Name: " in line:
            return True

    return False


def last_scheduled_start_time() -> datetime.datetime:
    """return the time we last logged a started scheduled backup"""
    returned_timestamp = None
    with open("/var/log/dsmsched.log", "r", encoding="utf-8") as fileobj:
        for line in fileobj:
            line = line.rstrip()
            # 2023-04-03 22:00:16 --- SCHEDULEREC OBJECT BEGIN FILE_0000 2023-04-04 00:00:00
            if " SCHEDULEREC OBJECT BEGIN " in line:
                timestamp = line.split(" -")[0]
                returned_timestamp = datetime.datetime.fromisoformat(timestamp)

    return returned_timestamp


def last_error_time() -> datetime.datetime:
    """return the last time we saw an error logged"""
    returned_timestamp = None
    with open("/var/log/dsmerror.log", "r", encoding="utf-8") as fileobj:
        for line in fileobj:
            line = line.rstrip()
            # We are only interested in lines beginning with a timestamp, it
            # appears an error can span multiple lines, e.g.:
            # ===
            # 2023-03-16 14:32:59 ANS1835E PASSWORDACCESS is GENERATE, but password needed for server 'XYZ'. # pylint:disable=line-too-long
            # Either the password is not stored locally, or it was changed at the server.
            # ===
            if re.search(
                r"^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2} ", line
            ):
                timestamp_parts = line.split(maxsplit=2)
                timestamp = timestamp_parts[0] + " " + timestamp_parts[1]
                returned_timestamp = datetime.datetime.fromisoformat(timestamp)

    return returned_timestamp


def has_run_recently(last_time: datetime.datetime, hours: int) -> bool:
    """return true if last_time is within the given number of hours"""
    elapsed_time = datetime.datetime.now() - last_time

    if elapsed_time > datetime.timedelta(hours=hours):
        return False

    return True


def main() -> None:
    """the starting point of the program"""
    # alert if there is no assigned backup schedule
    if not have_schedule():
        print("CRITICAL: we have no backup schedules")
        sys.exit(1)

    # alert if there have been no scheduled runs logged within the last 25 hours
    last_start = last_scheduled_start_time()
    if not isinstance(last_start, datetime.datetime):
        print("CRITICAL: unable to get last scehduled start time")
        sys.exit(1)

    recent_hours = 25
    if not has_run_recently(last_start, recent_hours):
        print(f"CRITICAL: it is more than {recent_hours}h since a backup was logged")
        sys.exit(1)

    # If we have seen errors appearing later in the logs than the last time we
    # started a scheduled backup this indicates the latest backup had problems.
    # If we did not get a datetime.datetime this means we found no errors and
    # this is OK.
    last_error = last_error_time()
    if isinstance(last_error, datetime.datetime):
        if last_error > last_start:
            print(
                f"CRITICAL: last error time ({last_error})",
                f"is newer than last start time ({last_start})",
            )
            sys.exit(1)

    print(f"the last scheduled backup started at: {last_start}")
    print(f"the last error was logged at: {last_error}")
    print("OK: no problems detected")


if __name__ == "__main__":
    main()
