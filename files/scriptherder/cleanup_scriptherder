#!/usr/bin/env python3

import os
import re


def decide_interval(tokens):
    # Default to weekly
    interval = "weekly"
    if tokens[0][0] == "@":
        word = tokens[0]
        if word == "@reboot":
            # reboot once every half year?
            interval = "halfyear"
        elif word == "@yearly" or word == "@annually":
            interval = "yearly"
        elif word == "@monthly":
            interval = "monthly"
        elif word == "@weekly":
            interval = "weekly"
        elif word == "@daily" or word == "@midnight" or word == "@hourly":
            interval = "daily"
    else:
        if tokens[1].startswith('*') and (
            tokens[2] == tokens[3] == tokens[4] == "*"
        ):
            interval = "hourly"
        elif tokens[2] == tokens[3] == tokens[4] == "*":
            interval = "daily"
        elif tokens[3] != "*":
            interval = "yearly"
        elif tokens[2] != "*":
            interval = "monthly"
        elif tokens[4] != "*":
            interval = "weekly"
    return interval


def decide_days_to_save(interval):
    min_logs_to_save = 7
    if interval == "yearly":
        days_to_save = min_logs_to_save * 365
    elif interval == "halfyear":
        days_to_save = min_logs_to_save * 180
    elif interval == "monthly":
        days_to_save = min_logs_to_save * 31
    elif interval == "weekly":
        days_to_save = min_logs_to_save * 7
    elif interval == "daily":
        days_to_save = min_logs_to_save * 1
    else:
        # "hourly" If a job runs more than once per hour,
        # like "*/5" or even "*" we want to keep even less
        days_to_save = 2
    return days_to_save


with os.popen("/usr/bin/crontab -l") as pipe:
    for line in pipe:

        if re.match("#", line):
            # Skip comments
            continue

        regex = "/usr/local/bin/scriptherder"
        if not re.search(regex, line):
            # Skip everything not monitored by scriptherder
            continue

        tokens = line.split()
        interval = decide_interval(tokens)
        days_to_save = decide_days_to_save(interval)
        position = 0
        for arg in tokens:
            position += 1
            if arg == "--name":
                break

        # Make sure --name isn't the last argument
        if position < len(tokens):
            job_name = tokens[position].replace("-", "_")
        else:
            continue

        # Match output from scriptherder
        job_name = tokens[position].replace("-", "_")

        if job_name and days_to_save:
            command = "find /var/cache/scriptherder -type f "
            command += f"-mtime +{days_to_save} -name {job_name}__* "
            command += "-delete"
            os.system(
                command
            )
