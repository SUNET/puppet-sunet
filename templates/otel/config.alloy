// Listen to localhost for open telemetry. 
otelcol.receiver.otlp "otel" {
  grpc {
    endpoint = "127.0.0.1:4317"
  }
  http {
    endpoint = "127.0.0.1:4318"
  }
  output {
    metrics = [otelcol.processor.batch.otel.input]
    logs    = [otelcol.processor.batch.otel.input]
    traces  = [otelcol.processor.batch.otel.input]
  }
}
// Batch send eveything to the default exporter below. 
otelcol.processor.batch "otel" {
  output {
    metrics = [otelcol.exporter.otlp.default.input]
    logs    = [otelcol.exporter.otlp.default.input]
    traces  = [otelcol.exporter.otlp.default.input]
  }
}
loki.relabel "journal" {
  forward_to = []

  rule {
    source_labels = ["__journal__systemd_unit"]
    target_label  = "unit"
  }
  rule {
    source_labels = ["__journal__hostname"]
    target_label  = "hostname"
  }
}
otelcol.receiver.loki "default" {
  output {
    metrics = [otelcol.processor.batch.otel.input]
    logs    = [otelcol.processor.batch.otel.input]
    traces  = [otelcol.processor.batch.otel.input]
  }
}
loki.source.journal "read"  {
  forward_to    = [otelcol.receiver.loki.default.receiver]
  relabel_rules = loki.relabel.journal.rules
  labels        = {component = "loki.source.journal"}
}

// Export local metrics, work the same as the older prometheus-node-exporter
prometheus.exporter.unix "default" {
  include_exporter_metrics = true
  enable_collectors = ["systemd", "processes"]
}
// Listen to prometheus
otelcol.receiver.prometheus "default" {
  output {
    metrics = [otelcol.exporter.otlp.default.input]
  }
}
// change name of job to node
discovery.relabel "node_exporter" { 
    // workaround that the job name get set to 'integrations/unix' instead of 'node' that the dashboard expects
  targets = prometheus.exporter.unix.default.targets
  rule {
    action       = "replace"
    target_label = "job"
    replacement  = "node"
  }
}
discovery.file "targetsd" {
  files = ["/etc/alloy/targets.d/*.yaml"]
}
// scrape our own metrics 
prometheus.scrape "default" {
  targets = discovery.relabel.node_exporter.output
  forward_to = [
    otelcol.receiver.prometheus.default.receiver,
  ]
}
prometheus.scrape "targetsd" {
  targets = discovery.file.targetsd.targets
  forward_to = [
    otelcol.receiver.prometheus.default.receiver,
  ]
}
// Write everything to the receiver below. 
otelcol.exporter.otlp "default" {
  client {
    endpoint = "<%= @otel_receiver %>:4317"
  }
}
