import logging

from pylons import request, session, url
from pylons.controllers.util import redirect

from nipapwww.lib.base import BaseController
from nipap.nipapconfig import NipapConfig

log = logging.getLogger(__name__)


class ProxyAuthController(BaseController):
    """ Deals with proxy authentication.
    """

    requires_auth = False

    def login(self):
        """ Proxy auth handling
        """
        cfg = NipapConfig()
        proxy_conf = self._proxy_auth_config(cfg, request)
        if proxy_conf['debug']:
            print("Proxy auth status", proxy_conf)
        if not proxy_conf['is_ready'] or not proxy_conf['user']:
            if not proxy_conf['is_trusted']:
                log.warning('Untrusted proxy {} tried to log in'.format(request.remote_addr))
            # Consider 404 instead?
            redirect(url(controller='auth', action='login'))
            return

        # Create session
        session['user'] = proxy_conf['user']
        session['full_name'] = proxy_conf['full_name']
        session['readonly'] = proxy_conf['is_readonly']
        session['current_vrfs'] = {}
        session.save()

        # handle redirect back
        redirect(session['path_before_login'] if 'path_before_login' in session else url(controller='prefix', action='list'))

    def _proxy_auth_config(self, cfg, request):
        section = 'auth.proxy'
        auth_proxy_configured = cfg.has_section(section)

        def get(key, default=None):
            value = default
            if cfg.has_option(section, key):
                value = cfg.get(section, key)
            return value

        use_env = get('use_env')
        debug = not not get('debug')
        auth_header = get('header', 'X-Remote-User')
        trusted_proxies = get('trusted_proxies', '127.0.0.1').split()
        full_name_header = get('full_name_header')
        rw_header = get('rw_header')
        ro_header = get('ro_header')
        rw_split = get('rw_split')
        ro_split = get('ro_split')
        rw_values = get('rw_values')
        if rw_values:
            rw_values = rw_values.split(rw_split)
        ro_values = get('ro_values')
        if ro_values:
            ro_values = ro_values.split(ro_split)

        # If ENV variables we have implicit trust for those values
        headers = {}
        if use_env or auth_header in request.environ:
            is_trusted = True
            headers = request.environ
            if debug:
                print('Using ENV Headers', headers)
        else:
            headers = request.headers
            if debug:
                print('Using HTTP Headers', headers.items())
            # XXX: proper cider check?
            is_trusted = request.remote_addr in trusted_proxies
            if '*' in trusted_proxies:
                is_trusted = True

        user = None
        if auth_header and auth_header in headers:
            user = headers[auth_header]
        full_name = ''
        if full_name_header:
            if full_name_header in headers:
                full_name = headers[full_name_header]

        # Check if user has write access
        user_ro = headers[ro_header] if ro_header and ro_header in headers else ''
        user_rw = headers[rw_header] if rw_header and rw_header in headers else ''
        if debug:
            print('ro', user_ro, 'rw', user_rw, 'ro_values', ro_values, 'rw_values', rw_values)
        # Default is rw if nothing has been set
        is_readonly, auth_failed = self._is_readonly(user_ro=user_ro, user_rw=user_rw, ro_allowed=ro_values, rw_allowed=rw_values, ro_split=ro_split, rw_split=rw_split)

        return {
            # Check if proxy auth enabled
            'is_configured': auth_proxy_configured,
            'is_trusted': is_trusted,
            'is_ready': auth_proxy_configured and is_trusted and not auth_failed,
            'user': user,
            'is_readonly': is_readonly,
            'full_name': full_name,
            'debug': debug,
        }

    def _is_readonly(self, user_ro=None, user_rw=None, ro_allowed=[], rw_allowed=[], ro_split=None, rw_split=None):
        # Default is rw if nothing has been set
        is_readonly = False
        auth_failed = False
        if ro_allowed and user_ro:
            user_groups = user_ro.split(ro_split)
            if [g for g in user_groups if g in ro_allowed]:
                is_readonly = True
        if rw_allowed:
            if user_rw:
                user_groups = user_rw.split(rw_split)
                if [g for g in user_groups if g in rw_allowed]:
                    is_readonly = False
                elif ro_allowed and not is_readonly:
                    # Since ro_values have been set and the user is neither ro or rw, then the user should be denied access.
                    auth_failed = True
                else:
                    is_readonly = True
            elif ro_allowed and not is_readonly:
                auth_failed = True
            else:
                is_readonly = True
        return is_readonly, auth_failed