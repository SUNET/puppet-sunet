#!/usr/bin/perl -w
#
#

use strict;
use warnings;
use Net::DNS;
use Getopt::Std;
use Net::DNS::Resolver::Recurse;
use Data::Dumper;

####################################################
# Check DNS zone
#
# 0. (-r) Do recursive trace and compare parent with child
# 1. Check zone transfer from main DNS
# 2. Check SOA from main
# 3. Get NS from zone
# 4. Get SOA from all NS and compare it with main SOA
#
####################################################

my %options=();
getopts("s:r",\%options);


my $dnsserver = '<%= @fqdn %>';
my $dorecursive = $options{r};
my $dnsminsize = 5;

my $filename='/etc/hiera/data/local.yaml';
my $line_number=3;
my $count = 1;
my @dnszones;

my $number_of_errors = 0;

open(FILE,$filename) or die "Can't open $filename for reading: $!\n";
while (<FILE>) {
    if (($count >= $line_number) && (length( $_ ) > 1))
    {
        chomp;
        push (@dnszones, substr($_, 4));
    }
    $count++;
}
close $filename;

foreach my $dnszone (@dnszones) {
    my $errors  = 0;
    my $errortext = "";

    my $errorsWarning  = 0;
    my $errortextWarning = "";

    my @packets;

    my $coderef = sub {
    my $packet = shift;
    push @packets,$packet;
    };

    sub parsepacket {
        my $packet = shift;

        my $header = $packet->header;
        my @answers = $packet->answer;
        my @authority = $packet->authority;
        my @additional = $packet->additional;

        my @ns;

        if ($header->rcode ne 'NOERROR') {
            $errors++;
            $errortext .= "DNS returned rcode: .$header->rcode. ";
        }

        if ($header->aa == 1) {
            @ns = @answers;
        } else {
            @ns = @authority;
        }


        my %nshash;

        foreach (@ns) {
            my $add = $_;
            my $ownername = $add->name;

            ## Check the owner name of the respone so it is equal to the zone we want to check
            if ($dnszone ne $ownername) {
                $errors++;
                print "ERROR: Returned NS for wrong domain ($dnszone, $ownername)\n";
            }

            $nshash{$add->rdstring}{'valid'} = 1;
            $nshash{$add->rdstring}{'address'} = ();
        }

        foreach (@additional) {
            my $add = $_;

#           print "-apa-\n";
#           $add->print;
#           print Dumper($add);
#           print "--\n";

            my $nstemp = $add->name.".";

            if ($nstemp =~ /\Q$dnszone\E\.$/) {
                if ($nshash{$nstemp}{'valid'} == 1) {
                    push @{$nshash{$nstemp}{'address'}},$add->address;
                }
            }
        }

        return %nshash;
    }

##  Checking if parent info is also in child info (only works for normail domains, eg sunet.se and nordu.net)
    if ($dorecursive) {

        my $resolver = Net::DNS::Resolver::Recurse->new();
        $resolver->udp_timeout(10);

        $resolver->recursion_callback($coderef);
#$resolver->callback($coderef);

#my $packet = $resolver->query ( $dnszone, 'NS' );

        my $packet = $resolver->query_dorecursion ( $dnszone, 'NS' );

        my $numberofpackets = scalar @packets;

        my $parentpacket = $packets[$numberofpackets-2];
        my $childpacket = $packets[$numberofpackets-1];

        my %parentns = parsepacket($parentpacket);
        my %childns = parsepacket($childpacket);

        foreach (keys %parentns) {
            my $key = $_;

            if ($childns{$key} && $childns{$key}{'valid'} == 1) {

                if ($parentns{$key} && $parentns{$key}{'address'}) {

                    my @parentaddress = @{$parentns{$key}{'address'}};

                    if ($childns{$key} && $childns{$key}{'address'}) {
                        my @childaddress = @{$childns{$key}{'address'}};

                        foreach (@parentaddress) {
                            my $address = $_;

                            my $found = 0;

                            foreach (@childaddress) {
                                my $caddress = $_;

                                if ($address eq $caddress) {
                                        $found = 1;
                                }
                            }

                            if ($found == 0) {
                                $errors++;
                                $errortext .= "NS $key with IP $address found in parent but not in child. ";
                            }
                        }
                    }
                    #else {
                    #    $errors++;
                    #    $errortext .= "NS $key with IP found in parent but not in child. ";
                    #}
                }
            } else {
                $errors++;
                $errortext .= "NS $key found in parent but not in child. ";
            }
        }
    }

    # Set options in the constructor
    my $res = Net::DNS::Resolver->new(
        nameservers => [$dnsserver],
        recurse     => 0,
        debug       => 0,
        );

    $res->tcp_timeout(10);
    #my @zone = $res->axfr($dnszone);
    #my $size = @zone;

    my @nameservers;
    my $masterSOASerial;

    #if (@zone) {
    #    if ($size < $dnsminsize) {
    #        $errors++;
    #        $errortext .= "axfr from $dnsserver contains only $size entries. ";
    #    }
    #} else {
    #    $errors++;
    #    $errortext .= "Zone transfer failed from $dnsserver: ". $res->errorstring . ". ";
    #}

    my $replyNS = $res->query($dnszone, "NS");

    if ($replyNS) {
        foreach my $rr (grep { $_->type eq 'NS' } $replyNS->answer) {
        push @nameservers,$rr->nsdname;
        }
    } else {
        $errors++;
        $errortext .= "NS query failed from $dnsserver: " . $res->errorstring . ". ";
    }

    my $replySOA = $res->query($dnszone, "SOA");

    if ($replySOA) {
        foreach my $rr (grep { $_->type eq 'SOA' } $replySOA->answer) {
        $masterSOASerial = $rr->serial;
        }
    } else {
        $errors++;
        $errortext .= "SOA query failed from $dnsserver: " . $res->errorstring . ". ";
    }

    my $countNS = @nameservers;

    if ($countNS < 1) {
        $errors++;
        $errortext .= "NS query from $dnsserver did not reply any NS. ";
    }


    foreach my $server (@nameservers) {
        my $resChild = Net::DNS::Resolver->new;
        $resChild->nameservers("$server");
        my $replyChildSOA = $resChild->query("$dnszone", "SOA");

        if ($replyChildSOA) {

            foreach my $rr (grep { $_->type eq 'SOA' } $replyChildSOA->answer) {
                my $childserial = $rr->serial;

#               print "NS server $server has serial $childserial, master has $masterSOASerial.  ";

                if ($childserial != $masterSOASerial)
                {
                    $errorsWarning++;
                    $errortextWarning .= "NS server $server has serial $childserial, master has $masterSOASerial.  ";
                }
            }
        } else {
            $errors++;
            $errortext .= "SOA query faild from $server: " . $resChild->errorstring . ". ";
        }
    }

    if ($errors > 0) {
        print "Error in checking DNS zone $dnszone: " . $errortext . "\n";
        $number_of_errors++;
    }

    if ($errorsWarning > 0) {
        print "Error in checking DNS zone $dnszone: " . $errortextWarning . "\n";
        $number_of_errors++;
    }
}

if ($number_of_errors > 0){
    exit 1;
    } else {
        print "All DNS zones are ok\n";
        exit 0;
    }