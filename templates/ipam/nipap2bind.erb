#!/usr/bin/env python

import sys
sys.path.append('/usr/local/lib/python2.7/site-packages/')
import ConfigParser
import os
import glob
from pynipap import Prefix, AuthOptions
import pynipap
import pytter
import time
import re
import difflib
import shutil
from easyzone.zone_check import ZoneCheck
import smtplib
from email.MIMEMultipart import MIMEMultipart
from email.MIMEText import MIMEText

__version__ = "1.2.2"

Config = ConfigParser.ConfigParser()
Config.read('/etc/bind/nipaprc')
username = Config.get('global', 'username')
password = Config.get('global', 'password')

pynipap.xmlrpc_uri = "http://{}:{}@127.0.0.1:1337".format(username, password)

tmpdir = "/etc/bind/generated/tmp"
outputdir = "/etc/bind/generated"
staticdir = "/etc/bind/generated/static"
serialfile = "/etc/bind/generated/SERIAL" # File just contains last serial

a = AuthOptions({
    'authoritative_source': 'nipap2bind'
})

alt_dns_servers = ['<%= @name_servers[0] %>', '<%= @name_servers[1] %>', '<%= @name_servers[2] %>']

rd = pytter.Pytter('<%= @fqdn %>.', 'hostmaster.<%= @domain %>.', alt_dns_servers)
rd.aggregate_v6 = 48

# check if serial file exists

def update_timestamp(timestamp):
    fh = open(serialfile, "w+")
    fh.write(timestamp)
    fh.close

if os.path.isfile(serialfile):
    fh = open(serialfile)
    old_timestamp = fh.readlines()[0].rstrip()
    res = re.match(r'[0-9]+', old_timestamp)
    if res:
        last_datetime = old_timestamp[0:8]
        curr_datetime = time.strftime("%Y%m%d")
        if last_datetime == curr_datetime:
            datetime = last_datetime
            tmp_serial = int(old_timestamp[8:10]) + 1
            new_serial = '%02d' % tmp_serial
            timestamp = time.strftime("%Y%m%d{}").format(new_serial)
            fh.close()
        else:
            timestamp = time.strftime("%Y%m%d00")
            fh.close()
    else:
        timestamp = time.strftime("%Y%m%d00")
        fh.close()


else:
    timestamp = time.strftime("%Y%m%d00")


rd.serialnumber = timestamp

prefixes = Prefix.list({'vrf_rt': None}) # This filters away any prefixes in VRFs
vrf_prefixes = Prefix.list({'vrf_rt': '2603:1918'})

prefixes = prefixes + vrf_prefixes

for p in prefixes:
    if p.status == 'reserved':
        continue
    # require letters in hostnames
    if (p.node is not None):
        res = re.match(r'.*[a-z]+.*', p.node)
        if res:
            if not p.node.endswith("."):
                if len(p.node.split(".")) == 1:
                    hostname = "{}.sunet.se.".format(p.node)
                else:
                    hostname = "{}.".format(p.node)
            else:
                hostname = p.node

            prefix = p.prefix
            rd.add_reverse(prefix, hostname)

rd.dump_zones(tmpdir)

# Add static entries in the bottom of each file

for zone in os.listdir(staticdir):
    if os.path.isfile("/etc/bind/generated/tmp/{}".format(zone)):
        fh = open("{}/{}".format(tmpdir, zone), "a")
        with open("{}/{}".format(staticdir, zone)) as f:
            lines = f.readlines()
        fh.writelines(lines)
        fh.close()
    else:
        # There is no zone file in the tmp directory, so let's create an empty one
        rd.generate_empty_zone("{}/{}".format(tmpdir, zone))
        fh = open("{}/{}".format(tmpdir, zone), "a")
        with open("{}/{}".format(staticdir, zone)) as f:
            lines = f.readlines()
        fh.writelines(lines)
        fh.close()

# Diff all files
updated_serial = False
errors = {}
for zone in os.listdir("/etc/bind/generated/tmp/"):
    fromfile = "{}/{}".format(tmpdir, zone)
    tofile = "{}/{}".format(outputdir, zone)
    if os.path.isfile(tofile):
        with open(fromfile) as f1, open(tofile) as f2:
            diff = difflib.ndiff(f1.readlines(), f2.readlines())
            changes = 0
            for line in list(diff):
                res = re.match(r'^(?:\+|\-).*', line)
                if res:
                    changes += 1
            if changes > 2:
                # File has more than just a timestamp change
                # Validate before copying over
                c = ZoneCheck(checkzone='/usr/sbin/named-checkzone')
                try:
                    if c.isValid(zone, fromfile):
                        shutil.copy2(fromfile, tofile)
                    else:
                        # Handle the errors later
                        errors[zone] = c.error
                except OSError:
                    print("Error while validating {}".format(fromfile))
                    raise
                if updated_serial == False:
                    update_timestamp(timestamp)
                    updated_serial = True
    else:
        c = ZoneCheck(checkzone='/usr/sbin/named-checkzone')
        try:
            if c.isValid(zone, fromfile):
                shutil.copy2(fromfile, tofile)
            else:
                # Handle the errors later
                errors[zone] = c.error
        except OSError:
            print("Error while validating {}".format(fromfile))
            raise
        if updated_serial == False:
            update_timestamp(timestamp)
            updated_serial = True

# Handle all the errors

if len(errors) > 0:
    message = "The following DNS zone files have not validated:\n\n"
    for zone, error in errors.iteritems():
        message += "{} \nError: {}".format(zone, error)

    sender = "root@ipam.<%= @domain %>"
    receiver = "npe@nordu.net"
    subject = "[ipam.<%= @domain %>] Some zones did not validate"
    server = smtplib.SMTP('localhost')
    msg = MIMEMultipart()
    msg['From'] = sender
    msg['To'] = receiver
    msg['Subject'] = subject
    msg.attach(MIMEText(message, 'plain'))
    text = msg.as_string()
    server.sendmail(sender, receiver, text)
    server.quit()


# Clean up the tmp dir

path = "{}/*".format(tmpdir)

r = glob.glob(path)
for i in r:
    os.remove(i)