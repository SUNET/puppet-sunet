#!/usr/bin/env python

import os
import sys
import pprint
import socket
import logging
import argparse

logger = None

_defaults = {'socket_fn': '/opt/frontend/haproxy/run/stats',
             'syslog': False,
             'debug': False,
             }


def parse_args(defaults):
    parser = argparse.ArgumentParser(description = 'haproxy status checker',
                                     add_help = True,
                                     formatter_class = argparse.ArgumentDefaultsHelpFormatter,
    )
    
    parser.add_argument('--debug',
                        dest = 'debug',
                        action = 'store_true', default = defaults['debug'],
                        help = 'Enable debug operation',
    )
    parser.add_argument('--syslog',
                        dest = 'syslog',
                        action = 'store_true', default = defaults['syslog'],
                        help = 'Enable syslog output',
    )    
    parser.add_argument('--socket_fn',
                        dest = 'socket_fn',
                        default = defaults['socket_fn'],
                        help = 'haproxy socket',
                        metavar = 'PATH',
    )
    args = parser.parse_args()
    return args
    

def haproxy_execute(cmd, args):
    logger.debug('opening AF_UNIX socket {} for command "{}"'.format(args.socket_fn, cmd))
    client = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
    client.connect(args.socket_fn)
    client.send(cmd + '\n')

    data = ''
    while True:
        this = client.recv(1)
        if not this:
            break
        data += this

    logger.debug('haproxy result: {}'.format(data))
    return data


def get_status(args):
    data = haproxy_execute('show stat', args)
    if not data:
        return None
    lines = data.split('\n')
    if not lines[0].startswith('# '):
        logger.error('Unknown status response from haproxy: {}'.format(data))
    fields = lines[0][2:].split(',')
    if len(lines) < 2:
        logger.warning('haproxy did not return status for any backends: {}'.format(data))
        return None
    status = {}
    lines = lines[1:]
    for line in lines:
        if not line:
            continue
        values = line.split(',')
        if len(values) != len(fields):
            logger.warning('Values ({}) does not match legend ({}): {}'.format(len(values), len(fields), line))
            continue
        site = values[0]
        host = values[1]
        if site not in status:
            status[site] = {}
        status[site][host] = {}
        for i in range(len(fields)):
            status[site][host][fields[i]] = values[i]
            
    if args.debug:
        logger.debug('haproxy status:\n{}'.format(pprint.pformat(status)))
    return status


def main(myname = 'haproxy-status', args = None, logger_in = None, defaults = _defaults):
    if not args:
        args = parse_args(defaults)

    global logger
    # initialize various components
    if logger_in:
        logger = logger_in
    else:
        logger = logging.getLogger(myname)
        if args.debug:
            logger.setLevel(logging.DEBUG)
            # log to stderr when debugging
            formatter = logging.Formatter('%(asctime)s %(name)s %(threadName)s: %(levelname)s %(message)s')
            stream_h = logging.StreamHandler(sys.stderr)
            stream_h.setFormatter(formatter)
            logger.addHandler(stream_h)
    if args.syslog:
        syslog_h = logging.handlers.SysLogHandler()
        formatter = logging.Formatter('%(name)s: %(levelname)s %(message)s')
        syslog_h.setFormatter(formatter)
        logger.addHandler(syslog_h)

    status = get_status(args)

    
if __name__ == '__main__':
    try:
        progname = os.path.basename(sys.argv[0])
        res = main(progname)
        if isinstance(res, int):
            sys.exit(res)
        if res:
            sys.exit(0)
        sys.exit(1)
    except KeyboardInterrupt:
        sys.exit(0)
