---
version: '3'

services:

  haproxy:
    image: '<%= @haproxy_image %>:<%= @haproxy_imagetag %>'
    expose:
      - "443"
    restart: always
    volumes:
      - '/dev/log:/dev/log'
      - '/etc/dehydrated:/etc/dehydrated:ro'  # XXX reduce to only necessary set of files later
      - '/etc/ssl:/etc/ssl:ro'                # XXX reduce to only necessary set of files later
      - '/opt/frontend/scripts/haproxy-start.sh:/haproxy-start.sh:ro'
      - 'haproxy_data:/etc/haproxy'
      - 'haproxy_control:/var/run/haproxy-control'
    depends_on:
      - config
    environment:
      - 'WAIT_FOR_INTERFACE=sarimner0'
<% if @varnish_enabled == true -%>
      - 'WAIT_FOR_CONTAINER=varnish'
<% end -%>
    command: /haproxy-start.sh

<% if @varnish_enabled == true -%>
  varnish:
    image: '<%= @varnish_image %>:<%= @varnish_imagetag %>'
    expose:
      - "1080"
    volumes:
      - <%= @varnish_config %>:/etc/varnish/default.vcl:ro
    command: varnishd -F -f /etc/varnish/default.vcl -s <%= @varnish_storage %> -a 0.0.0.0:1080
    restart: always
    depends_on:
      - haproxy
<% else -%>
  # varnish disabled
<% end -%>

  config:
    image: 'docker.sunet.se/frontend/frontend-tools:latest'
    restart: always
    volumes:
      - /opt/frontend/scripts:/opt/frontend/scripts:ro
      - /opt/frontend/config/common:/opt/frontend/config/common:ro
      - /opt/frontend/config/<%= @instance %>:/opt/frontend/config/<%= @instance %>:ro
      - /opt/frontend/api/backends/<%= @site_name %>:/opt/frontend/api/backends/<%= @site_name %>:ro
      - haproxy_data:/etc/haproxy
    command: /opt/frontend/scripts/generate-haproxy-config --debug --instance <%= @instance %> --haproxy_template <%= @instance %>/haproxy.j2

  monitor:
    image: 'docker.sunet.se/frontend/frontend-tools:latest'
    restart: always
    volumes:
      - /opt/frontend/scripts:/opt/frontend/scripts:ro
      - /opt/frontend/config/common:/opt/frontend/config/common:ro
      - /opt/frontend/config/<%= @instance %>:/opt/frontend/config/<%= @instance %>:ro
      - /opt/frontend/monitor/<%= @instance %>:/opt/frontend/monitor/<%= @instance %>:rw
      - haproxy_control:/var/run/haproxy-control
    command: /opt/frontend/scripts/monitor-haproxy --stats_url /var/run/haproxy-control/stats 'site=<%= @site_name %>;group=default'
    environment:
      - 'HOSTFQDN=<%= @fqdn %>'
      - 'INSTANCE=<%= @instance %>'
      - 'SITENAME=<%= @site_name %>'
    depends_on:
      - haproxy

volumes:
  haproxy_data:
  haproxy_control:

# Provide user-friendly name of bridge interface
networks:
  default:
    driver_opts:
      com.docker.network.bridge.name: br-<%= @instance %>
