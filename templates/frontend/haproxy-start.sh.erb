#!/bin/bash
#
# Start script for haproxy container, managing startup process and automatic reload
# on config change (detected using inotify events triggering on MOVED_TO).
#

HAPROXY_CFG=${HAPROXY_CFG-'/etc/haproxy/haproxy.cfg'}
HAPROXY_RUNDIR=${HAPROXY_RUNDIR-'/run'}
HAPROXY_MASTERSOCK=${HAPROXY_MASTERSOCK-"${HAPROXY_RUNDIR}/haproxy-master.sock"}
HAPROXY_PIDFILE=${HAPROXY_PIDFILE-"${HAPROXY_RUNDIR}/haproxy.pid"}
HAPROXY_WAITIF=${HAPROXY_WAITIF-'20'}
HAPROXY_WAITCFG=${HAPROXY_WAITCFG-'10'}
HAPROXY_WAITCONTAINER=${HAPROXY_WAITCONTAINER-'10'}
HAPROXY_NEW_CONFIG=${HAPROXY_NEW_CONFIG-'/etc/haproxy/haproxy.cfg'}

if [[ $WAIT_FOR_INTERFACE ]]; then
    for i in $(seq "${HAPROXY_WAITIF}"); do
	ip link ls dev "$WAIT_FOR_INTERFACE" 2>&1 | grep -q 'state UP' && break
	echo "$0: Waiting for interface ${WAIT_FOR_INTERFACE} (${i}/${HAPROXY_WAITIF})"
	sleep 1
    done

    if ! ip link ls dev "$WAIT_FOR_INTERFACE" | grep -q 'state UP'; then
	echo "$0: Interface ${WAIT_FOR_INTERFACE} not found after ${HAPROXY_WAITIF} seconds - exiting"
	echo "$0: The interface should have been configured by the script 'configure-container-network'"
	echo "$0: that should have been executed by the systemd service for this frontend instance."
	echo "$0: Investigate why it failed, or didn't start in time before this script gave up."
	exit 1
    fi

    echo "$0: Interface ${WAIT_FOR_INTERFACE} is UP:"
    ip addr list "$WAIT_FOR_INTERFACE"
fi

echo "Current user:"
id
echo "Permissions and location of new config:"
ls -ld "$(dirname ${HAPROXY_NEW_CONFIG})" "${HAPROXY_NEW_CONFIG}"

for i in $(seq "${HAPROXY_WAITCFG}"); do
    test -s "${HAPROXY_NEW_CONFIG}" && break
    echo "$0: Waiting for haproxy config file ${HAPROXY_NEW_CONFIG} (${i}/${HAPROXY_WAITCFG})"
    sleep 1
done

if [ ! -s "${HAPROXY_NEW_CONFIG}" ]; then
    echo "$0: haproxy config not found after ${HAPROXY_WAITCFG} seconds: ${HAPROXY_NEW_CONFIG} - exiting"
    echo "$0: The haproxy config file should have been created by the 'config' container for this frontend instance"
    exit 1
fi

# Copy the new config to our config directory before checking it, and to make the 'mv' below atomic
cp "${HAPROXY_NEW_CONFIG}" "${HAPROXY_CFG}.new"
config_ok=0
/usr/sbin/haproxy -c -f "${HAPROXY_CFG}.new" && config_ok=1
if [ $config_ok = 1 ]; then
    mv "${HAPROXY_CFG}.new" "${HAPROXY_CFG}"
else
	echo "$0: New initial config ${HAPROXY_CFG} NOT OK, not replacing whatever is in ${HAPROXY_CFG} now"
    ls -l "${HAPROXY_CFG}.new" "${HAPROXY_CFG}"
fi


if [[ $WAIT_FOR_CONTAINER ]]; then
    seen=0
    for i in $(seq "${HAPROXY_WAITCONTAINER}"); do
	ping -c 1 "${WAIT_FOR_CONTAINER}" > /dev/null 2>&1 && seen=1
	test $seen == 1 && break
	echo "$0: Waiting for container ${WAIT_FOR_CONTAINER} to appear (${i}/${HAPROXY_WAITCONTAINER})"
	sleep 1
    done
    if [[ $seen != 1 ]]; then
	echo "$0: Container ${WAIT_FOR_CONTAINER} not present after ${HAPROXY_WAITCONTAINER} seconds"
	exit 1
    fi
fi

# Show haproxy version
/usr/sbin/haproxy -v

echo "$0: Checking config: ${HAPROXY_CFG}"

config_ok=0
/usr/sbin/haproxy -c -f "${HAPROXY_CFG}" && config_ok=1
if [ $config_ok != 1 ]; then
    echo "$0: Config ${HAPROXY_CFG} NOT OK, exiting"
    exit 1
fi

# haproxy 2.0+
sock_args=''
if [[ $HAPROXY_MASTERSOCK ]]; then
    sock_args=(-S "${HAPROXY_MASTERSOCK}")
fi
# -db is essential for haproxy to not pipe stdout,stderr to /dev/null
haproxy_cmd=$(echo /usr/sbin/haproxy "$@" -p "${HAPROXY_PIDFILE}" -f "${HAPROXY_CFG}" -W "${sock_args[@]}" -db)

# haproxy 1.8 or 1.9
if /usr/sbin/haproxy -v | grep -q 'HA-*Proxy version 1'; then
    echo ""
    echo "$0: Please upgrade haproxy to 2+"
    echo ""
    haproxy_cmd=$(echo /usr/sbin/haproxy "$@" -p "${HAPROXY_PIDFILE}" -f "${HAPROXY_CFG}")
fi


echo "$0: HA-Proxy command: ${haproxy_cmd}"

echo "$0: Config ${HAPROXY_CFG} checked OK, starting haproxy"
if [ -x /usr/sbin/haproxy-systemd-wrapper ]; then
    echo ""
    echo "$0: Please upgrade haproxy to 2+"
    echo ""
    # haproxy 1.7
    /usr/sbin/haproxy-systemd-wrapper -p "${HAPROXY_PIDFILE}" -f "${HAPROXY_CFG}" &
    main_pid=$!
else
    $haproxy_cmd &
    main_pid=$!
fi
wait_pid=0

term_handler() {
    echo "$0: Received SIGTERM, shutting down PIDs $(xargs echo < \"${HAPROXY_PIDFILE}\") (main: ${main_pid}) (haproxy) + ${wait_pid} (wait)"
    if [ $main_pid -ne 0 ]; then
	kill -SIGTERM "$main_pid"
	wait "$main_pid"
    fi
    if [ $wait_pid -ne 0 ]; then
	kill -SIGTERM "$wait_pid"
	wait "$wait_pid"
    fi
    exit 143; # 128 + 15 -- SIGTERM
}

trap 'term_handler' SIGTERM


while true; do
    echo "$0: Waiting for ${HAPROXY_NEW_CONFIG} to be moved-to"

    # Block until an inotify event says that the config file was replaced
    inotifywait -q -e moved_to "${HAPROXY_NEW_CONFIG}" &
    wait_pid=$!
    wait $wait_pid

    # Copy the new config to our config directory before checking it, and to make the 'mv' below atomic
    cp "${HAPROXY_NEW_CONFIG}" "${HAPROXY_CFG}.new"

    echo "$0: Move-to event triggered, checking config: ${HAPROXY_CFG}.new"
    config_ok=0
    /usr/sbin/haproxy -c -f "${HAPROXY_CFG}.new" && config_ok=1
    if [ $config_ok = 1 ]; then
    mv "${HAPROXY_CFG}.new" "${HAPROXY_CFG}" && {
        echo "$0: Config ${HAPROXY_CFG}.new checked OK, gracefully restarting haproxy with it"
        # -sf is "send finish", sends a signal to all PIDs in the PID file asking them to finish up and terminate
        $haproxy_cmd -sf "$(cat "${HAPROXY_PIDFILE}")" &
        main_pid=$!
        echo "$0: haproxy gracefully reloaded"
    }
    else
	echo "$0: Config ${HAPROXY_CFG} NOT OK, not reloading"
    fi
    sleep 1  # spin control
done
