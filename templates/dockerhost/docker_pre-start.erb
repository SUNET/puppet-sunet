#!/bin/bash
#
# This script registers/removes docker containers IP addresses
# from the local unbound resolver in the post-start / pre-stop actions.
#
# For action pre-start, it checks if there is a CID file that needs to be
# cleaned away to not prevent the new container from starting.
#

# eduid_docker_pre-post: CID d05a0842ce1700ee3328d42ccf5c2f29cc3d71fa6dcc6a72f994f8d032453be7
# eduid_docker_pre-post: ACTION pre-stop
# eduid_docker_pre-post: IMAGE docker.sunet.se/eduid/eduid-mm-service
# eduid_docker_pre-post: NAME eduid-mm-service
#for e in "CID" "ACTION" "IMAGE" "NAME"; do
#    logger -t eduid_docker_pre-post "$e `printenv $e`"
#done

if [ "x$ACTION" != "xpre-start" ]; then
    exit 0
fi

logtag="dockerhost[$ACTION $NAME $$]"
logger -t "${logtag}" "$NAME ($IMAGE), CID: '$CID'"

if [ -f "${CIDFILE}" ]; then
    logger -t "${logtag}" "Found CID file (${CIDFILE}). Checking if container is still running."
    # Clean away the CID file in pre-start if the container is in fact not running
    DEAD=$(docker inspect --format '{{ .State.Dead }}' "${CID}" 2>/dev/null)
    if [ "x${DEAD}" = "xtrue" -o "x${DEAD}" = "x" ]; then
        logger -t "${logtag}" "Removing left-over CID file '${CIDFILE}' (CID ${CID}, dead: ${DEAD})";
        rm -f "${CIDFILE}"
    fi
else
    logger -t "${logtag}" "CID file ${CIDFILE} not found (this is not an error)"
fi

# Remove any stopped container with this name to prevent the docker start script
# from just restarting that one (instead of starting the currently tagged image,
# which might be newer than the one used by the old container)
if docker inspect "${NAME}" > /dev/null; then
    logger -t "${logtag}" "Removing named container '${NAME}'"
    docker rm "${NAME}" && logger -t "${logtag}" "Removed named container '${NAME}'"
fi

# Work-around: if unbound is not running when a container starts, it will get
# an incorrect /etc/resolv.conf (SUNET resolvers). It will then later on be
# unable to resolv .docker hostnames.
#service unbound status > /dev/null
#if [ $? -ne 0 ]; then
#    for retry in 1 2 3 4 5 6 7 8 9 10; do
#        sleep 3
#        logger -t "${logtag}" "Waiting for service unbound"
#        service unbound status > /dev/null
#        if [ $? -eq 0 ]; then
#            break
#        fi
#    done
#fi
#
#service unbound status > /dev/null
#if [ $? -ne 0 ]; then
#    logger -t "${logtag}" "Service unbound not running - not waiting anymore."
#    exit 0
#fi

exit 0
