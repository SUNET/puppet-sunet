#!/bin/bash
#
# This script registers/removes docker containers IP addresses
# from the local unbound resolver in the post-start / pre-stop actions.
#
# For action pre-start, it checks if there is a CID file that needs to be
# cleaned away to not prevent the new container from starting.
#

# eduid_docker_pre-post: CID d05a0842ce1700ee3328d42ccf5c2f29cc3d71fa6dcc6a72f994f8d032453be7
# eduid_docker_pre-post: ACTION pre-stop
# eduid_docker_pre-post: IMAGE docker.sunet.se/eduid/eduid-mm-service
# eduid_docker_pre-post: NAME eduid-mm-service
#for e in "CID" "ACTION" "IMAGE" "NAME"; do
#    logger -t eduid_docker_pre-post "$e `printenv $e`"
#done

if [ "x$ACTION" != "xpost-start" ]; then
    exit 0
fi

UNBOUND_IP="<%= @ipaddress_docker0 %>"
DNS_TTL="<%= @dns_ttl %>"

logtag="dockerhost[$ACTION $NAME $$]"
logger -t "${logtag}" "$NAME ($IMAGE), CID: '$CID'"

if [ "x${NAME}" = "xunbound" ]; then
    logger -t "${logtag}" "Ignoring 'unbound' container"
    exit 0
fi

if [ "x${CID}" = "x" ]; then
    CID=$(docker inspect --format '{{ .Id }}' "${NAME}" 2>/dev/null)

    if [ "x${CID}" = "x" ]; then
        # sometimes containers start slow...
        for retry in 1 2 3 4 5; do
            sleep 1
            logger -t "${logtag}" "Retrying CID lookup for ${NAME}"
            CID=$(docker inspect --format '{{ .Id }}' "${NAME}" 2>/dev/null)
            if [ "x${CID}" != "x" ]; then
                break
            fi
        done
    fi

    if [ "x${CID}" = "x" ]; then
        logger -t "${logtag}" "No CID provided or found! Aborting."
        exit 1
    fi

    logger -t "${logtag}" "Found CID ${CID} using docker inspect on '${NAME}'"
fi

networkMode=$(docker inspect --format '{{ .HostConfig.NetworkMode }}' "${CID}" 2>/dev/null)
if [ "x${networkMode}" = "x" ]; then
    # sometimes containers start slow... but we need to detect when the
    # network interface is up quickly to prevent problems in other containers
    # scheduled to start right after this one
    for retry in 0.1 0.2 0.4 1 1 1 1 1; do
        sleep $retry
        logger -t "${logtag}" "Retrying networkMode lookup for ${CID}"
        networkMode=$(docker inspect --format '{{ .HostConfig.NetworkMode }}' "${CID}" 2>/dev/null)
        if [ "x${networkMode}" != "x" ]; then
            break
        fi
    done
fi
if [ "x$networkMode" != "xbridge" ]; then
    logger -t "${logtag}" "Container is not running in bridge mode (${networkMode}). Not updating Unbound DNS data."
    exit 0
fi

# Remove registered name.
# XXX this does NOT handle multiple instances of the same image running on
# a single Docker host!
logger -t "${logtag}" "Un-registering ${NAME}.docker from unbound at ${UNBOUND_IP}"
unbound-control -s "${UNBOUND_IP}" local_data_remove "${NAME}.docker." > /dev/null

ip=$(docker inspect --format '{{ .NetworkSettings.IPAddress }}' "${CID}" 2>/dev/null)
if [ "x${ip}" = "x" ]; then
    logger -t "${logtag}" "Failed to get IP from CID ${CID}. Aborting."
    exit 1
fi

for retry in 1 2 3 4 5; do
    logger -t "${logtag}" "Trying to register ${NAME}.docker. IN A ${ip} with unbound at ${UNBOUND_IP}"
    unbound-control -s "${UNBOUND_IP}" local_data "${NAME}.docker. ${DNS_TTL} IN A ${ip}" > /dev/null

    # Register reverse pointer - there is no local_data_ptr command unfortunately
    ptr=$(echo "${ip}" | awk -F . '{print $4"."$3"."$2"."$1".in-addr.arpa."}')
    unbound-control -s "${UNBOUND_IP}" local_data "${ptr} ${DNS_TTL} IN PTR ${NAME}.docker."

    # Check if the registered local_data available yet
    host "${NAME}.docker." "${UNBOUND_IP}" > /dev/null
    if [ $? -eq 0 ]; then
        break
    else
        sleep 1
    fi
done

host "${NAME}.docker." "${UNBOUND_IP}" > /dev/null
if [ $? -ne 0 ]; then
    logger -t "${logtag}" "Could not register '${NAME}.docker. IN A ${ip}' with unbound at ${UNBOUND_IP}. Aborting!"
    exit 1
else
    logger -t "${logtag}" "Successfully registered '${NAME}.docker. IN A ${ip}'"
fi
