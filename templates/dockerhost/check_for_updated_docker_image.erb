#!/bin/bash
#
# This script checks if there are updated Docker images
# available for running containers or not.

# Nagios compatible exit-codes
OK=0
WARNING=1
CRITICAL=2
UNKNOWN=3

# To avoid doing duplicated checks the script stores info
# about which images it already has checked in this array.
# These are the possible states for each image:
#
#'up-to-date'    <-- No action needed, already up-to-date
#'updated'       <-- A new, updated image has been downloaded
#'untagged'      <-- Untagged image in use
declare -A image_info

declare -A container_info

# Verify whether or not a new image is available
populate_docker_info()
{
    for container_name in $(docker ps --format "{{.Names}}")
    do

        local __container_image="$(docker ps --filter name="${container_name}$" --format "{{.Image}}")"

        # If the image only contains numbers and digits it most likely
        # means that a newer image has been downloaded and the old one
        # has been untagged.
        if [[ "${__container_image}" =~ ^[a-z0-9]+$ ]]; then

            # If the syntax is still correct for this version of Docker
            # we might get info about which image the container was
            # started upon by using inspect instead of ps.
            local __container_config_image="$(docker inspect --format '{{.Config.Image}}' "${container_name}" 2>&1)"

            if [[ ${?} == 0 && "${__container_config_image}" != '' ]]; then
                image_info["${__container_config_image}"]='untagged'
                container_info["${container_name}"]="${__container_config_image}"
            else
                echo "Critical: potential change in Docker API. Image for: ${container_name} is unknown"
                exit ${CRITICAL}
            fi

        else

            local __container_image_digest="$(docker inspect --format '{{.Image}}' "${container_name}")"

            # Do not pull the image if we already have the info we need
            if [[ "${image_info["${__container_image}"]}" == '' ]]; then
                local __container_image_status="$(docker pull "${__container_image}" 2>&1)"
            fi

            if [[ ${?} != 0 ]]; then
                echo "CRITICAL: couldn't fetch image ${__container_image}: ${__container_image_status}"
                exit ${CRITICAL}
            fi

            if [[ "${__container_image_digest}" != "$(docker inspect --format '{{.Id}}' "${__container_image}")" ]]; then
                image_info["${__container_image}"]='updated'
                container_info["${container_name}"]="${__container_image}"
            else
                image_info["${__container_image}"]='up-to-date'
                container_info["${container_name}"]="${__container_image}"
            fi
        fi

    done
}

# Check if Docker is installed
# Failing here is OK, since not all machines run Docker
if [[ "$(which docker)" == '' ]]; then
    echo "Info: Docker is not installed"
    exit ${OK}
fi

# If docker is installed check if it's working correctly.
# Failing here is not OK, since that means Docker is
# installed but not working or failed to start.
docker ps > /dev/null 2>&1
if [[ ${?} != 0 ]]; then
    echo "Critical: Docker is not working correctly"
    exit ${CRITICAL}
fi

# Populate two arrays with info about the running
# containers and images to use throughout the script.
populate_docker_info

# Default values for the update-check
updated_container_available="no"
untagged_image_running="no"
exit_message=""

for container_name in $(docker ps --format "{{.Names}}")
do

    container_image="${container_info["${container_name}"]}"

    # Avoid duplicated work by checking if the image that the
    # container started on have already been checked for updates.
    if [[ "${image_info["${container_image}"]}" == 'up-to-date' ]]; then
        exit_message+=", no update needed for: ${container_name}"
    elif [[ "${image_info["${container_image}"]}" == 'updated' ]]; then
        exit_message+=", a new image is available for: ${container_name}"
        updated_container_available="yes"
    elif [[ "${image_info["${container_image}"]}" == 'untagged' ]]; then
        exit_message+=", container: ${container_name} is running on an old, untagged version of: ${container_image}"
        untagged_image_running="yes"
    fi

done

if [[ "${updated_container_available}" == "no" && "${untagged_image_running}" == "no" ]]; then
    echo "Info${exit_message}"
    exit ${OK}
else
    echo "WARNING${exit_message}"
    exit ${WARNING}
fi
