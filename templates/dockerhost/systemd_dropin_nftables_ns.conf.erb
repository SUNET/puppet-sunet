#
# Put docker in a network namespace where it can use iptables to it's hearts content
# while this host uses nftables as a host firewall.
#
#   Source: https://wiki.archlinux.org/title/nftables#Working_with_Docker
#
[Service]
PrivateNetwork=yes

ExecStartPre=-/bin/echo "Setting up a network namespace for the whole Docker daemon"

# cleanup
ExecStartPre=-/bin/echo "Removing to_docker interface if it exists"
ExecStartPre=-/usr/bin/nsenter -t 1 -n -- ip link delete to_docker

# Set up a virtual ethernet cable whose ends are called to_docker and to_host.
ExecStartPre=/usr/bin/nsenter -t 1 -n -- ip link add to_docker type veth peer name to_host
# Now move the to_host end into the network namespace systemd set up for the docker service.
ExecStartPre=/bin/bash -c 'nsenter -t 1 -n -- ip link set to_host netns "$$BASHPID" && true'
# The end inside the namespace could be renamed like this, but we don't want to.
#ExecStartPre=ip link set to_host name eth0

# Configure the host side of the veth pair.
ExecStartPre=/usr/bin/nsenter -t 1 -n -- ip addr add 172.16.0.1/24 dev to_docker
ExecStartPre=/usr/bin/nsenter -t 1 -n -- ip addr add fd00::1/64 dev to_docker
ExecStartPre=/usr/bin/nsenter -t 1 -n -- ip link set to_docker up

# Configure the docker side of the veth pair.
ExecStartPre=/sbin/ip addr add 172.16.0.2/24 dev to_host
ExecStartPre=/sbin/ip addr add fd00::2/64 dev to_host
ExecStartPre=/sbin/ip link set to_host up
ExecStartPre=/sbin/ip route add default via 172.16.0.1 dev to_host
ExecStartPre=/sbin/ip route add default via fd00::1 dev to_host

ExecStartPre=-/bin/echo "Configured network namespace for the Docker daemon:"
ExecStartPre=-/bin/echo "--- Links"
ExecStartPre=-/sbin/ip link show
ExecStartPre=-/bin/echo "--- Addresses"
ExecStartPre=-/sbin/ip addr list
ExecStartPre=-/bin/echo "--- Routes"
ExecStartPre=-/sbin/ip route list
ExecStartPre=-/sbin/ip -6 route list

<% if @dmi[product][name] == 'OpenStack Compute' -%>
# In environments where we relay on RAs for IPv6 (e.g Safespring) we need to
# forcely allow RAs even if IP forwarding is enabled (below).

# We can't use 'all' when configuring "accept_ra" so specify the primary
# interface.
# https://unix.stackexchange.com/questions/90443/what-is-the-difference-between-all-default-and-eth-in-proc-sys-net-ipv
ExecStartPre=/usr/bin/nsenter -t 1 -n -- /sbin/sysctl -w net.ipv6.conf.<%= @networking[primary] %>.accept_ra=2
<%- end -%>

# Docker enables IP forwarding itself, but only in it's namespace of course. We need to enable it
# in the hosts namespace too.
ExecStartPre=/usr/bin/nsenter -t 1 -n -- /sbin/sysctl -w net.ipv4.ip_forward=1 net.ipv6.conf.all.forwarding=1

# Route traffic from the container networks to the docker IP in the namespace, and let dockers iptables
# rules handle the rest.
ExecStartPre=/usr/bin/nsenter -t 1 -n -- /sbin/ip route add fd0c::/16 via fd00::2

# Un-NATed packets from the containers appear quite frequently on the to_docker interface (looks like RST
# packets when then connection is already closed for example), and gets logged as martian packets. Disable that.
#
# For some reason, this gets logged even though net.ipv4.conf.to_docker.log_martians = 0:
#
#   [Mon Mar 21 07:36:02 2022] IPv4: martian source 130.242.x.y from 172.16.8.4, on dev to_docker
#
# on Linux 4.15 at least, so we disable all martian logging.
ExecStartPre=/sbin/sysctl -w net.ipv4.conf.all.log_martians=0

# Setup named namespace for easier troubleshooting from the outside.
ExecStartPost=-/bin/mkdir -p /var/run/netns
ExecStartPost=-/bin/bash -c '/bin/ln -sf /proc/`cat /var/run/docker.pid`/ns/net /var/run/netns/docker'
