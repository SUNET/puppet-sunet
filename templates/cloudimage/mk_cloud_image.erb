#!/bin/bash

set -e

# do not edit by hand

src_image="<%= @image_src %>"
size="<%= @size %>"
dhcp="<%= @dhcp ? 'yes' : 'no' %>"
mac="<%= @mac %>"
hostname="<%= @name %>"
bridge="<%= @bridge %>"
cpus="<%= @cpus %>"
mem="<%= @memory %>"
repo="<%= @repo %>"
tag="<%= @tagpattern %>"
ip="<%= @ip %>"
gateway="<%= @gateway %>"
netmask="<%= @netmask %>"
resolver="<%= @resolver %>"
ip6="<%= @ip6 %>"
gateway6="<%= @gateway6 %>"
netmask6="<%= @netmask6 %>"
password="<%= @password %>"
description="<%= @description %>"
apt_dir="<%= @apt_dir %>"

mkdir -p "/var/lib/libvirt/images/${hostname}"
cd "/var/lib/libvirt/images/${hostname}"

id=$(uuidgen)

seed=${hostname}_seed.img
disk=${hostname}.img

if [ ! -f ${seed} ]; then
    # If the seed file exists, just update it with new user-data and meta-data below
    # to facilitate reinstalls with 'sunet-reinstall'
    truncate --size 2M ${seed}
    mkfs.vfat -n cidata ${seed} 2>/dev/null
fi

if [ "x${password}" != "x" ]; then
   pass="password: ${password}"
fi

user_data=$(mktemp)
cat > ${user_data} <<EOF
#cloud-config
user: root
ssh_pwauth: False
<% if @ssh_keys %>
ssh_authorized_keys:
<% @ssh_keys.each do |key| %>
   - <%= key %>
<% end %>
<% end %>
runcmd:
   - "grep -q '^GRUB_TERMINAL=serial$' /etc/default/grub.d/50-cloudimg-settings.cfg || (echo ''; echo '# sunet cloud-init: enable grub on serial console'; echo 'GRUB_TERMINAL=serial') >> /etc/default/grub.d/50-cloudimg-settings.cfg"
   - ["mkdir","/tmp/seed"]
   - ["mount","/dev/vdb","/tmp/seed"]
   - ["cp","/tmp/seed/bootstrap-cosmos.sh","/tmp/seed/cosmos_1.2-2_all.deb","/root"]
   - ["cd","/root"]
   - "test -f /tmp/seed/sunet-reinstall.tgz && (echo 'Unpacking files from previous installation:'; cd /; tar zxvf /tmp/seed/sunet-reinstall.tgz)"
   - "cd /root && /root/bootstrap-cosmos.sh ${hostname} ${repo} ${tag}"
disable_root: 0
EOF

meta_data=$(mktemp)
cat > ${meta_data} <<EOF
#cloud-config
instance-id: iid-${id}
local-hostname: ${hostname}
disable_root: 0
EOF

dns=""
if [ "x${resolver}" != "x" ]; then
   dns="dns-nameservers ${resolver}"
fi

if [ "x${ip}" != "x" ]; then
   dhcp="no"
fi

if [ "x${dhcp}" = "xyes" ]; then
cat >> ${meta_data} <<EOF
network-interfaces: |
    auto eth0
    iface eth0 inet dhcp
    ${dns}
EOF
else
  if [ "x${ip}" != "x" ]; then
     cat >> ${meta_data} <<EOF
network-interfaces: |
    auto eth0
    iface eth0 inet static
        address ${ip}
        netmask ${netmask}
        gateway ${gateway}
        ${dns}

EOF
  fi

  if [ "x${ip6}" != "x" ]; then
     cat >> ${meta_data} <<EOF
network-interfaces: |
    auto eth0
    iface eth0 inet6 static
        address ${ip6}
        netmask ${netmask6}
        gateway ${gateway6}
        ${dns}

EOF
  fi
fi

mcopy -i ${seed} ${user_data} ::user-data 2>/dev/null
mcopy -i ${seed} ${meta_data} ::meta-data 2>/dev/null
mcopy -i ${seed} ${apt_dir}/bootstrap-cosmos.sh ${apt_dir}/cosmos_1.2-2_all.deb ::

rm -f ${user_data}
rm -f ${meta_data}

virsh pool-refresh default

if [ ! -f /var/lib/libvirt/images/${hostname}/${disk} ]; then
    test -f /var/lib/libvirt/images/${disk} || virsh vol-clone --pool default ${src_image} ${disk}
    virsh vol-resize --pool default ${disk} ${size}
    mv /var/lib/libvirt/images/${disk} /var/lib/libvirt/images/${hostname}/${disk}
fi

network="--network bridge=${bridge}"
install_options=""

# Optional settings
if [ "x${mac}" != "x" ]; then
   network="${network},mac=${mac}"
fi
if [ "x${description}" != "x" ]; then
   install_options="${install_options} --description '${description}'"
fi

# use eval to expand the $install_options properly
eval virt-install -r ${mem} -n ${hostname} --vcpus=${cpus} --autostart --memballoon virtio --boot hd \
    --disk path=/var/lib/libvirt/images/${hostname}/${disk},format=qcow2,bus=virtio \
    --disk path=/var/lib/libvirt/images/${hostname}/${seed},bus=virtio \
    ${network} \
    ${install_options}
