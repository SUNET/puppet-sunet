#!/bin/bash

# For production replace the selfsigned TLS cert with your cert at ./data/tls_certificate.pem

# Generate trusted keys
mkdir -p data/trusted_keys
if [ ! -f data/trusted_keys/privkey1.key ]
then
    openssl genrsa -out data/trusted_keys/privkey1.key 4096
    openssl rsa -in data/trusted_keys/privkey1.key -pubout -out data/trusted_keys/pubkey1.pem

    openssl genrsa -out data/trusted_keys/privkey2.key 4096
    openssl rsa -in data/trusted_keys/privkey2.key -pubout -out data/trusted_keys/pubkey2.pem

    openssl genrsa -out data/trusted_keys/privkey3.key 2048
    openssl rsa -in data/trusted_keys/privkey3.key -pubout -out data/trusted_keys/pubkey3.pem

    openssl ecparam -name prime256v1 -genkey -noout -out data/trusted_keys/privkey4.key
    openssl ec -in data/trusted_keys/privkey4.key -pubout -out data/trusted_keys/pubkey4.pem

    openssl ecparam -name secp384r1 -genkey -noout -out data/trusted_keys/privkey5.key
    openssl ec -in data/trusted_keys/privkey5.key -pubout -out data/trusted_keys/pubkey5.pem

    openssl ecparam -name secp521r1 -genkey -noout -out data/trusted_keys/privkey6.key
    openssl ec -in data/trusted_keys/privkey6.key -pubout -out data/trusted_keys/pubkey6.pem

    openssl genpkey -algorithm ed25519 -out data/trusted_keys/privkey7.key
    openssl pkey -in data/trusted_keys/privkey7.key -pubout -out data/trusted_keys/pubkey7.pem

    openssl genpkey -algorithm ed448 -out data/trusted_keys/privkey8.key
    openssl pkey -in data/trusted_keys/privkey8.key -pubout -out data/trusted_keys/pubkey8.pem

    openssl genpkey -algorithm ed25519 -out data/trusted_keys/privkey9.key
    openssl pkey -in data/trusted_keys/privkey9.key -pubout -out data/trusted_keys/pubkey9.pem

    openssl genpkey -algorithm ed448 -out data/trusted_keys/privkey10.key
    openssl pkey -in data/trusted_keys/privkey10.key -pubout -out data/trusted_keys/pubkey10.pem

    chmod 644 data/trusted_keys/privkey*.key

    # Add the tls cert and key
    openssl ecparam -name prime256v1 -genkey -noout -out data/tls_key.key
    python3 -c '
import os, sys
if os.environ["<%= @ca_url %>"] not in ["https://ca:8005", "https://ca:443", "https://ca"]:
  sys.exit(1)
'
    if [ $? -eq 0 ]
    then
        openssl req -subj "/C=SE/CN=<%= @ca_dns_name %>" -addext "subjectAltName = DNS:<%= @ca_dns_name %>" -new -x509 -key data/tls_key.key -out data/tls_certificate.pem -days 1026
    else
        openssl req -subj "/C=SE/CN=<%= @ca_dns_name %>" -addext "subjectAltName = DNS:<%= @ca_dns_name %>, DNS:localhost" -new -x509 -key data/tls_key.key -out data/tls_certificate.pem -days 1026
    fi

    chmod 644 data/tls_key*.key
fi


echo "Using 'sudo' to set correct directory ownership"
# Remove git create folder files
docker-compose -f docker-compose.yml down || exit 1 # Stop service if running
sudo rm -f data/hsm_tokens/.empty || exit 1 # if sudo is not installed ot failed
sudo rm -f data/db_data/.empty
sudo rm -f data/ca_root_certs/.empty
sudo mkdir -p data/hsm_tokens data/db_data data/ca_root_certs
# sudo chown -R $USER data/hsm_tokens data/db_data/
# docker-compose build || exit 1
sudo chown -R 1500 data/hsm_tokens
sudo chown -R 1500 data/ca_root_certs
sudo chown -R 999 data/db_data

exit 0

docker-compose -f docker-compose.yml up -d || exit 1

# Allow container to startup
sleep 3
# Run test container
echo -e "Running tests\n"
sleep 2

python3 -c '
import os, sys
if os.environ["CA_URL"] in ["https://ca:8005", "https://ca:443", "https://ca"]:
  sys.exit(0)
sys.exit(1)
'
if [ $? -eq 0 ]
then
    docker run --env "CA_URL=${CA_URL}" --env "PKCS11_SIGN_API_TOKEN=${PKCS11_SIGN_API_TOKEN}" --env "ACME_ROOT=${ACME_ROOT}" --network pkcs11_ca_default pkcs11_ca_test1 || exit 1
    echo -e "\nService ONLINE at ${CA_URL} inside the docker network pkcs11_ca_default"
    echo -e "Note that the service listens on 0.0.0.0 so will be exposed to the public if its port is open"
else
    docker run --env "CA_URL=${CA_URL}" --env "PKCS11_SIGN_API_TOKEN=${PKCS11_SIGN_API_TOKEN}" --env "ACME_ROOT=${ACME_ROOT}" --network host pkcs11_ca_test1 || exit 1
    echo -e "\nService ONLINE at ${CA_URL}"
fi

echo ""
echo "Get ca log with 'docker logs pkcs11_ca_ca_1'"

# Show 'docker ps' output
echo -e "\n"
docker ps
