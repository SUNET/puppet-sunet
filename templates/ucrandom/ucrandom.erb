#!/usr/bin/env python

import socket
import fcntl
import time
import getopt
import sys
import struct
import math
import logging

RNDADDENTROPY=0x40085203
VERSION = "1.0.0"

def main():
    try:
        _main()
    except KeyboardInterrupt:
        sys.exit()

def _main():
    opts = {}
    args = []
    flags = "hvd:"

    try:
        opts, args = getopt.getopt(sys.argv[1:], flags)
        opts = dict(opts)
    except getopt.GetoptError, err:
        print str(err)
        usage()
        sys.exit(2)

    if '-h' in opts:
        usage()
        sys.exit()

    if '-v' in opts:
        print "ucrandom version %s (c) SUNET 2016" % VERSION
        sys.exit()

    opts.setdefault('-p',4711)
    opts.setdefault('-d',"/dev/random")
    opts.setdefault('-L',"INFO")

    loglevel = logging.INFO
    loglevel = getattr(logging, opts.get('-L').upper(), "INFO")
    if not isinstance(loglevel, int):
        raise ValueError('Invalid log level: %s' % loglevel)
    logging.basicConfig(level=loglevel,stream=sys.stderr)

    _loop(args,opts)
 
stop = False 
logger = logging.getLogger(__file__)

def _recv_addr(s,addr,port,length):
    logger.debug("trying %s:%d" % (addr,port))
    s.connect((addr,port))
    return s.recv(length)

def _recv(hosts,port,length):
    for host in hosts:
       try:
          s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
          s.settimeout(10)
          name,aliases,addrs = socket.gethostbyaddr(host)
          for addr in addrs:
              try:
                  return _recv_addr(s,addr,port,length)
              except Exception, iex:
                  logger.error(iex)
       except Exception, ex:
          logger.error(ex)

def range_bytes (): return range(256)
def range_printable(): return (ord(c) for c in string.printable)
def H(data, iterator=range_bytes):
    if not data:
        return 0
    entropy = 0
    for x in iterator():
        p_x = float(data.count(chr(x)))/len(data)
        if p_x > 0:
            entropy += - p_x*math.log(p_x, 2)
    return entropy
  
def _loop(args,opts):
    port = int(opts.get('-p'))
    length = 1024
    device = opts.get('-d')

    sleep_time = 1
    while not stop:
        with open("/proc/sys/kernel/random/entropy_avail") as fd:
            avail = int(fd.readline().strip())
            if avail < 2048:
                logger.info("have %d in pool - getting more ..." % avail)
                buf = _recv(args,port,length)
                if buf:
                    sz = len(buf)
                    logger.debug("got %d bytes..." % sz)
                    shannon_entropy = H(buf)
                    logger.info("shannon entropy of %d bytes is %d" % (sz,shannon_entropy))
                    if shannon_entropy > 6:
                        t = struct.pack("ii32s", 8*sz, sz, buf)
                        with open(device, "wb") as rnd:
                            fcntl.ioctl(rnd, RNDADDENTROPY, t)
                sleep_time = 1
            else:
                sleep_time *= 2
                if sleep_time > 32:
                    sleep_time = 1
                logger.info("have %d in pool - sleeping %d seconds..." % (avail, sleep_time))
            time.sleep(sleep_time)

def usage():
   pass

if __name__ == '__main__':
    main()
